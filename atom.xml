<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Ge&#39;s Blog</title>
  
  <subtitle>Do More and More,Say Less and Less.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gmsoar.github.io/"/>
  <updated>2019-07-19T05:01:35.596Z</updated>
  <id>https://gmsoar.github.io/</id>
  
  <author>
    <name>Mr.Ge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaSE之初识Java</title>
    <link href="https://gmsoar.github.io/JavaSE%E4%B9%8B%E5%88%9D%E8%AF%86Java/"/>
    <id>https://gmsoar.github.io/JavaSE之初识Java/</id>
    <published>2019-07-19T02:49:52.000Z</published>
    <updated>2019-07-19T05:01:35.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="No-1-初识Java"><a href="#No-1-初识Java" class="headerlink" title="No.1 初识Java"></a>No.1 初识Java</h1><hr><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="什么是Java语言"><a href="#什么是Java语言" class="headerlink" title="什么是Java语言"></a>什么是Java语言</h3><blockquote><p>Java语言是美国Sun公司（Stanford University Network/斯坦福大学网络公司），在1995年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。Java可运行于多个平台，如Windows, Mac OS，及其他多种UNIX版本的系统。</p></blockquote><h2 id="Java语言能做什么"><a href="#Java语言能做什么" class="headerlink" title="Java语言能做什么"></a>Java语言能做什么</h2><h3 id="Java的技术体系"><a href="#Java的技术体系" class="headerlink" title="Java的技术体系"></a>Java的技术体系</h3><blockquote><p>Sun根据应用的领域不同把Java技术划归为三个平台，依次是<strong>Java SE，Java EE ，Java ME</strong></p></blockquote><p>1.Java SE</p><blockquote><p>Java SE 是Java平台标准版的简称（Java Platform, Standard Edition） ，用于开发和部署桌面、服务器以及嵌入设备和实时环境中的Java应用程序。Java SE包括用于开发Java Web服务的类库，同时，Java SE为Java EE和Java ME提供了基础。我们在基础阶段学习的技术都是属于Java SE领域的内容。</p></blockquote><p>2.Java EE</p><blockquote><p>Java EE是Java平台企业版的简称（Java Platform  Enterprise Edition），用于开发便于组装、健壮、可扩展、安全的服务器端Java应用。Java EE建立于Java SE之上，具有Web服务、组件模型、以及通信API等特性，这些为面向服务的架构（SOA）以及开发Web2.0应用提供了支持。我们在就业班和企业级应用技术属于这个领域。</p></blockquote><p>3.Java ME</p><blockquote><p>Java ME是Java微版的简称（Java Platform Micro Edition），是一个技术和规范的集合，它为移动设备（包括消费类产品、嵌入式设备、高级移动设备等）提供了基于Java环境的开发与应用平台。</p></blockquote><h3 id="桌面应用程序"><a href="#桌面应用程序" class="headerlink" title="桌面应用程序"></a>桌面应用程序</h3><blockquote><p>桌面程序的开发几乎不流行，Java并不擅长做桌面程序，Java可以做桌面程序。</p></blockquote><h3 id="嵌入设备中的应用程序"><a href="#嵌入设备中的应用程序" class="headerlink" title="嵌入设备中的应用程序"></a>嵌入设备中的应用程序</h3><h3 id="大型互联网系统开发（Java的核心用途，工作的主要内容）"><a href="#大型互联网系统开发（Java的核心用途，工作的主要内容）" class="headerlink" title="大型互联网系统开发（Java的核心用途，工作的主要内容）"></a>大型互联网系统开发（Java的核心用途，工作的主要内容）</h3><blockquote><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><p>Java不只是做web系统，可以做服务器，做数据分析系统，做视频监控视频，轨道，智慧城市。</p><p>Java是兼容并包的语言：体系很庞大，但是功能很丰富，有一站式解决方案，安全，可以做高并发系统 。</p></blockquote><h2 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h2><h3 id="版本升级历史"><a href="#版本升级历史" class="headerlink" title="版本升级历史"></a>版本升级历史</h3><blockquote><p><strong>詹姆斯•高斯林</strong>（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。<br><strong>Java</strong>是印度尼西亚<code>爪哇岛</code>的英文名称，爪哇岛因盛产咖啡而闻名。Java创始人员团队中其中一名成员想起自己在Java岛（爪哇岛）上曾喝过一种美味的咖啡。</p><blockquote><ul><li>1995年Sun公司发布Java1.0版本（初始化版本）</li><li>1997年发布Java 1.1版本</li><li>1998年发布Java 1.2版本</li><li>2000年发布Java 1.3版本</li><li>2002年发布Java 1.4版本</li><li>2004年发布Java 1.5版本</li><li>2006年发布Java 1.6版本</li><li>2009年sun帝国死了。Oracle甲骨文公司收购Sun公司，并于2011发布Java 1.7版本，所以Java从此之后一直由Oracle公司管理。</li><li>2014年发布Java 1.8版本</li><li>2017年发布Java 9.0版本</li><li>2018年发布Java 10.0版本</li><li>2019 年已经是 Java 12版本</li></ul></blockquote></blockquote><h1 id="No-2-Java开发环境介绍与搭建"><a href="#No-2-Java开发环境介绍与搭建" class="headerlink" title="No.2 Java开发环境介绍与搭建"></a>No.2 Java开发环境介绍与搭建</h1><hr><h2 id="Java的组成"><a href="#Java的组成" class="headerlink" title="Java的组成"></a>Java的组成</h2><h3 id="JVM-Java虚拟机"><a href="#JVM-Java虚拟机" class="headerlink" title="JVM(Java虚拟机)"></a>JVM(Java虚拟机)</h3><blockquote><p><strong>JVM</strong>（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，最终都运行在<code>JVM</code> 之上。</p></blockquote><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><blockquote><p><strong>JRE</strong> (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM 和运行时所需要的核心类库</code>。如果程序员想要运行一个已经开发好的Java程序，那么只需要安装好JRE即可。</p></blockquote><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote><p><strong>JDK</strong>(Java Development Kit) ：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。我们想要运行一个已有的Java程序，那么只需安装<code>JRE</code> 即可。我们想要开发一个全新的Java程序，那么必须安装<code>JDK</code> 。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>1.从上面的产品介绍可以看出，JRE是包括JVM加上运行类库的，JDK包含了编译器等开发工具如后续即将介绍的javac或者java命令工具然后在加上JRE的。</p><p>2.如果程序员想要运行一个已经开发好的Java程序，那么只需要安装好JRE即可。但如果想开发一个新的Java程序应该安装JDK。</p><p>3.简言之：<strong>使用JDK安装完成Java程序，交给JRE去运行即可</strong>。</p><p>4.因为JDK已经包含了JRE,所以我们需要安装JDK即可。</p></blockquote><h2 id="Java跨平台的原理"><a href="#Java跨平台的原理" class="headerlink" title="Java跨平台的原理"></a>Java跨平台的原理</h2><blockquote><p><strong>跨平台</strong>：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为<strong>Java语言的跨平台特性</strong>(“一次编写,处处运行”)。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</p><p><strong>Java语言之所以可以跨平台的根本原因是因为JVM虚拟机</strong>。Java程序运行在Java虚拟机上，每个操作系统下都有不同版本的虚拟机。  </p></blockquote><h2 id="计算机的交互方式"><a href="#计算机的交互方式" class="headerlink" title="计算机的交互方式"></a>计算机的交互方式</h2><blockquote><p>人机交互技术是指通过计算机输入、输出设备，以有效的方式实现人与计算机对话的技术。计算机的交互方式包含可视化界面的方式（鼠标，键盘，触摸等操作）， 语音识别，体感技术等，CLI方式（字符操作界面）等形式。</p></blockquote><h3 id="可视化界面方式"><a href="#可视化界面方式" class="headerlink" title="可视化界面方式"></a>可视化界面方式</h3><blockquote><p>显示器上的功能操作可以直接通过鼠标，键盘，触摸等完成。</p></blockquote><h3 id="语音识别，体感技术等"><a href="#语音识别，体感技术等" class="headerlink" title="语音识别，体感技术等"></a>语音识别，体感技术等</h3><blockquote><p>应用场景如天猫精灵，汽车系统服务，等。</p></blockquote><h3 id="CLI方式（字符操作界面）"><a href="#CLI方式（字符操作界面）" class="headerlink" title="CLI方式（字符操作界面）"></a>CLI方式（字符操作界面）</h3><blockquote><p>在早期的DOS操作系统中，是需要通过字符操作界面书写命令操作计算机的，Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取代，对于我们开发人员，目前还是需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p></blockquote><h3 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h3><ul><li><p><strong>进入DOS操作窗口</strong></p><blockquote><ul><li>按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</li></ul></blockquote><blockquote><ul><li>打开DOS命令行后，看到一个路径<code>c:\user\xxx</code>就表示我们现在操作的是<code>c:\user\xxx</code>这个文件夹。</li></ul></blockquote></li><li><p><strong>常用命令</strong></p><table><thead><tr><th>命令</th><th>操作符号</th></tr></thead><tbody><tr><td>盘符切换</td><td><code>盘符名:</code></td></tr><tr><td>查看当前文件夹内容</td><td><code>dir</code></td></tr><tr><td>进入文件夹</td><td><code>cd 文件夹名</code></td></tr><tr><td>退出文件夹</td><td><code>cd..</code></td></tr><tr><td>退出到磁盘根目录</td><td><code>cd\</code></td></tr><tr><td>清屏</td><td><code>cls</code></td></tr><tr><td>系统时间</td><td><code>time</code></td></tr><tr><td>修改系统时间</td><td><code>date</code></td></tr></tbody></table></li></ul><blockquote><p>注意:cd到其他盘的文件夹中还需要切换盘符<br><strong>DOS常用命令练习</strong><br>盘符切换:<br>​D:/</p></blockquote><h2 id="JDK-9安装图解"><a href="#JDK-9安装图解" class="headerlink" title="JDK 9安装图解"></a>JDK 9安装图解</h2><p>至此，我们已经讲解完了Java开发环境的所有准备知识，从上述内容中我们得出结论，进行Java开发，需要安装Java的产品JDK，以下是安装详解。</p><p><img src="/.io//jdk1.jpg" alt="jdk1"></p><p><img src="/.io//jdk2.jpg" alt="jdk2"></p><p><img src="/.io//jdk3.jpg" alt="jdk3"></p><p><img src="/.io//jdk4.jpg" alt="jdk4"></p><p><img src="/.io//jdk5.jpg" alt="jdk5"></p><blockquote><p>小贴士：</p><p>安装路径中，不要包含中文和空格。因为计算机对中文和空格目录是比较敏感的，在以后的开发中可能这种安装形式会出现一些问题。</p></blockquote><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><h3 id="什么环境变量"><a href="#什么环境变量" class="headerlink" title="什么环境变量"></a>什么环境变量</h3><blockquote><p>虽然我们在上述步骤中已经安装好了JDK,但是操作系统并不知道我们JDK安装到了哪里，同时开发运行Java程序，需要使用JDK中提供的工具命令，工具在JDK9安装目录的<code>bin</code> 目录下。<strong>配置完环境变量后我们可以在任意的目录下都可以使用JDK的开发工具。</strong></p><p>如果需要使用这些工具命令，在DOS命令行下是不能直接使用这些工具的，就要先进入到JDK的bin目录下才可以使用，这个过程就会非常的麻烦。</p><p>如果不进入JDK的<code>bin</code>目录，这些工具就不能使用，会报错。</p></blockquote><p>为了开发方便，我们想<strong>在任意的目录下都可以使用JDK的开发工具</strong>，则必须要配置环境变量，配置环境变量的意义在于告诉操作系统，我们使用的JDK安装到了哪里，同时告诉操作系统我们的开发工具在哪个目录下。</p><h3 id="配置环境变量步骤"><a href="#配置环境变量步骤" class="headerlink" title="配置环境变量步骤"></a>配置环境变量步骤</h3><blockquote><p>上节中已经说明了环境变量的作用，我们需要配置JAVA_HOME说明Java的安装目录，我们同时也需要配置PATH环境变量说明Java的开发工具安装到了哪里，详细步骤如下：</p></blockquote><h4 id="Windows-7-8版本安装步骤"><a href="#Windows-7-8版本安装步骤" class="headerlink" title="Windows 7/8版本安装步骤"></a>Windows 7/8版本安装步骤</h4><ol><li>计算机鼠标右键,选择<code>属性</code><br></li><li>选择<code>高级系统设置</code> <br></li><li><code>高级</code> 选项卡，点击<code>环境变量</code> <br></li><li>点击<code>新建</code> ，创建新的环境变量<br></li><li>变量名输入<code>JAVA_HOME</code>，变量值输入JDK9的安装目录 <code>c:\Java9\jdk-9.0.1</code> <br></li><li>选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code><blockquote><p><strong>TIP</strong>:</p><p>Path中<code>C:\ProgrammaData\Oracle\Java...</code>，该路径是安装后默认配置的路径，可以删除。</p></blockquote></li></ol><p>7.在变量值的最前面，键入<code>%JAVA_HOME%\bin;</code>  分号必须要写，必须是英文格式。</p><h4 id="Windows-10版本安装步骤"><a href="#Windows-10版本安装步骤" class="headerlink" title="Windows 10版本安装步骤"></a>Windows 10版本安装步骤</h4><ol><li>文件资源管理器 –&gt; 此电脑鼠标右键 –&gt; 选择<code>属性</code> <br></li><li>选择<code>高级系统设置</code>  –&gt; 选择  <code>环境变量</code><br></li><li>点击下方系统变量的 <code>新建</code> ，创建新的环境变量，变量名输入<code>JAVA_HOME</code>，变量值输入JDK9的安装目录 <code>C:\develop\Java\jdk-9.0.1</code> <br></li><li>选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code><br></li><li>点击<code>新建</code>，键入<code>%JAVA_HOME%\bin</code> ，必须是英文格式。选中该行，上移到最上方，点击确定。</li></ol><h3 id="检测配置是否成功"><a href="#检测配置是否成功" class="headerlink" title="检测配置是否成功"></a>检测配置是否成功</h3><blockquote><p>1.环境变量配置完成，重新开启DOS命令行，在任意目录下输入<code>javac</code> 命令。</p></blockquote><blockquote><p>2.如果输入“Javac”命令有提示，接下来还需要输入“java -version”命令，看提示的版本号与安装是否一致，一致则说明安装最终已经成功。</p></blockquote><h1 id="No-3-第一个Java程序HelloWorld"><a href="#No-3-第一个Java程序HelloWorld" class="headerlink" title="No.3 第一个Java程序HelloWorld"></a>No.3 第一个Java程序HelloWorld</h1><hr><h2 id="程序开发步骤说明"><a href="#程序开发步骤说明" class="headerlink" title="程序开发步骤说明"></a>程序开发步骤说明</h2><p>Java程序开发三步骤：<strong>编写（写代码）</strong>、<strong>编译（翻译）</strong>、<strong>运行（跑起来）</strong>。</p><h2 id="编写HelloWorld源程序"><a href="#编写HelloWorld源程序" class="headerlink" title="编写HelloWorld源程序"></a>编写HelloWorld源程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件名必须是<code>HelloWorld</code> ，保证文件名和类的名字是一致的，注意大小写。</p></blockquote><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> 。</p><h2 id="编译HelloWorld源文件"><a href="#编译HelloWorld源文件" class="headerlink" title="编译HelloWorld源文件"></a>编译HelloWorld源文件</h2><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>d:\day01(根据你们自己的源文件目录)，使用<code>javac</code> 命令进行编译。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Java源文件名.后缀名</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><p>编译成功后，命令行没有任何提示。打开<code>d:\day01</code>目录，发现产生了一个新的文件 <code>HelloWorld.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><blockquote><p>Java源文件的编译工具<code>javac.exe</code>，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。</p></blockquote><h2 id="运行HelloWorld程序"><a href="#运行HelloWorld程序" class="headerlink" title="运行HelloWorld程序"></a>运行HelloWorld程序</h2><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>d:\day01，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java 类名字</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java HelloWorld</span></span><br></pre></td></tr></table></figure><blockquote><p>java HelloWord  不要写 不要写 不要写 .class</p><p>Java程序<code>.class文件</code> 的运行工具<code>java.exe</code> ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用java命令了。</p></blockquote><h2 id="入门程序小结"><a href="#入门程序小结" class="headerlink" title="入门程序小结"></a>入门程序小结</h2><h3 id="编译和运行是两回事"><a href="#编译和运行是两回事" class="headerlink" title="编译和运行是两回事"></a>编译和运行是两回事</h3><ul><li><strong>编译</strong>：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中，<code>javac</code> 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</li><li><strong>运行</strong>：是指将<code>class文件</code> 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</li></ul><h3 id="关于main方法"><a href="#关于main方法" class="headerlink" title="关于main方法"></a>关于main方法</h3><ul><li><strong>main方法</strong>：称为主方法。写法是<strong>固定格式</strong>不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</li></ul><h1 id="No-4-基本软件和基本概念"><a href="#No-4-基本软件和基本概念" class="headerlink" title="No.4 基本软件和基本概念"></a>No.4 基本软件和基本概念</h1><hr><h2 id="基本软件"><a href="#基本软件" class="headerlink" title="基本软件"></a>基本软件</h2><ul><li>前期阶段本人比较推荐Sublime或者notepad++进行Java代码的练习，后期阶段再使用专业的IDE集成工具IDEA、Eclipse等</li></ul><h2 id="注释comment"><a href="#注释comment" class="headerlink" title="注释comment"></a>注释comment</h2><p>注释是对代码解释和说明的文字。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，注释是给人看的，它不影响程序的编译和运行。</p><p>Java中的注释包含单行注释，多行注释和文档注释。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>单行注释以 <code>//开头 换行结束</code>，每个单行注释只能注释一行注释信息。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释以 <code>/*开头  以*/结束</code>，多行注释可以注释多行注释信息。</p><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>文档注释以<code>/**开头  以*/结束</code>,文档注释也可以注释多行信息。</p><h3 id="三种注释的区别"><a href="#三种注释的区别" class="headerlink" title="三种注释的区别"></a>三种注释的区别</h3><p>1.单行注释只能注释一行，</p><p>2.多行注释和文档注释都可以注释多行。</p><p>3.文档注释一般用于注释在类，方法，成员变量上（后续会遇到这些成员），文档注释的内容是可以提取到API文档中去的,下节将介绍如何生成API文档。</p><h3 id="javadoc命令生成API文档"><a href="#javadoc命令生成API文档" class="headerlink" title="javadoc命令生成API文档"></a>javadoc命令生成API文档</h3><ol><li><p>在<code>d:\day01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code> 。</p><br></li><li><p>用记事本打开</p><br></li><li><p>在文件中键入文本并保存，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Ge</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这个是一个入门的Java代码，这是我们的第一个代码HelloWord</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * 这是程序的入口方法名称叫main</span></span><br><span class="line"><span class="comment">     * 这个方法启动的时候会自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello,World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开DOS界面，进入到d:\day01目录下,输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc  -charset GBK HelloWorld.java</span><br></pre></td></tr></table></figure></li><li><p>进入到d:/day01目录下。双击index.html，可以观察到文档注释的信息提取到了API文档中去</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://gmsoar.github.io/categories/JavaSE/"/>
    
    
      <category term="初识Java" scheme="https://gmsoar.github.io/tags/%E5%88%9D%E8%AF%86Java/"/>
    
      <category term="常用DOS" scheme="https://gmsoar.github.io/tags/%E5%B8%B8%E7%94%A8DOS/"/>
    
      <category term="JAVA_HOME配置" scheme="https://gmsoar.github.io/tags/JAVA-HOME%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse快捷键整理</title>
    <link href="https://gmsoar.github.io/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/"/>
    <id>https://gmsoar.github.io/Eclipse快捷键整理/</id>
    <published>2019-07-13T13:20:21.456Z</published>
    <updated>2019-07-16T03:19:56.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 style="text-align:center;">Eclipse快捷键大全</h1>Ctrl+1 快速修复(最经典的快捷键,就不用多说了)<br>Ctrl+D: 删除当前行 <br>Ctrl+Alt+↓ 复制当前行到下一行(复制增加)<br>Ctrl+Alt+↑ 复制当前行到上一行(复制增加)<br>Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br>Alt+↑ 当前行和上面一行交互位置(同上)<br><a id="more"></a>Alt+← 前一个编辑的页面<br>Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)<br>Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性<br>Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br>Shift+Ctrl+Enter 在当前行插入空行(原理同上条)<br>Ctrl+Q 定位到最后编辑的地方<br>Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)<br>Ctrl+M 最大化当前的Edit或View (再按则反之)<br>Ctrl+/ 注释当前行,再按则取消注释<br>Ctrl+O 快速显示 OutLine<br>Ctrl+T 快速显示当前类的继承结构<br>Ctrl+W 关闭当前Editer<br>Ctrl+K 参照选中的Word快速定位到下一个<br>Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)<br>Ctrl+/(小键盘) 折叠当前类中的所有代码<br>Ctrl+×(小键盘) 展开当前类中的所有代码<br>Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)<br>Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)<br>Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes <br>line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)<br>Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)<br>Ctrl+Shift+F4 关闭所有打开的Editer<br>Ctrl+Shift+X 把当前选中的文本全部变味小写<br>Ctrl+Shift+Y 把当前选中的文本全部变为小写<br>Ctrl+Shift+F 格式化当前代码<br>Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)<br><h3>下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)</h3>Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)<br>Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)<br>Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)<br>Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)<br>Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)<br>Alt+Shift+I 合并变量(可能这样说有点不妥Inline)<br>Alt+Shift+V 移动函数和变量(不怎么常用)<br>Alt+Shift+Z 重构的后悔药(Undo)<br><p><span style="font-weight:bold">编辑</span><br>作用域&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快捷键<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找并替换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+F<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找上一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Shift+K<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找下一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+K<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;撤销&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Z<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;复制&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+C<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恢复上一个选择&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+↓<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剪切&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+X<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速修正&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl1+1<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容辅助&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+/<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全部选中&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+A<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上下文信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+？<br>Alt+Shift+?<br>Ctrl+Shift+Space<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示工具提示描述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F2<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择封装元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+↑<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择上一个元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+←<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择下一个元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+→<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量查找&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+J<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量逆向查找&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Shift+J<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;粘贴&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+V<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重做&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Y </p><p><span style="font-weight:bold">查看</span><br>作用域                 功能                 快捷键<br>全局                 放大                 Ctrl+=<br>全局                 缩小                 Ctrl+- </p><p><span style="font-weight:bold">窗口</span><br>作用域                 功能                快捷键<br>全局                 激活编辑器             F12<br>全局                 切换编辑器             Ctrl+Shift+W<br>全局                 上一个编辑器             Ctrl+Shift+F6<br>全局                 上一个视图             Ctrl+Shift+F7<br>全局                 上一个透视图             Ctrl+Shift+F8<br>全局                 下一个编辑器             Ctrl+F6<br>全局                 下一个视图             Ctrl+F7<br>全局                 下一个透视图             Ctrl+F8<br>文本编辑器             显示标尺上下文菜单     Ctrl+W<br>全局                 显示视图菜单             Ctrl+F10<br>全局                 显示系统菜单             Alt+- </p><p><span style="font-weight:bold">导航</span><br>作用域                 功能                 快捷键<br>Java编辑器             打开结构             Ctrl+F3<br>全局                 打开类型             Ctrl+Shift+T<br>全局                 打开类型层次结构         F4<br>全局                 打开声明             F3<br>全局                 打开外部javadoc         Shift+F2<br>全局                 打开资源             Ctrl+Shift+R<br>全局                 后退历史记录             Alt+←<br>全局                 前进历史记录             Alt+→<br>全局                 上一个                 Ctrl+,<br>全局                 下一个                 Ctrl+.<br>Java编辑器             显示大纲             Ctrl+O<br>全局                 在层次结构中打开类型  Ctrl+Shift+H<br>全局                 转至匹配的括号         Ctrl+Shift+P<br>全局                 转至上一个编辑位置     Ctrl+Q<br>Java编辑器             转至上一个成员         Ctrl+Shift+↑<br>Java编辑器             转至下一个成员         Ctrl+Shift+↓<br>文本编辑器             转至行                 Ctrl+L </p><p><span style="font-weight:bold">搜索</span><br>作用域                 功能                 快捷键<br>全局                 出现在文件中             Ctrl+Shift+U<br>全局                 打开搜索对话框         Ctrl+H<br>全局                 工作区中的声明         Ctrl+G<br>全局                 工作区中的引用         Ctrl+Shift+G </p><p><span style="font-weight:bold">文本编辑</span><br>作用域                 功能                 快捷键<br>文本编辑器             改写切换             Insert<br>文本编辑器             上滚行                 Ctrl+↑<br>文本编辑器             下滚行                Ctrl+↓ </p><p><span style="font-weight:bold">文件</span><br>作用域                 功能                 快捷键<br>全局                 剪切                 Ctrl+X<br>全局                    保存                    Ctrl+S<br>全局                 打印                 Ctrl+P<br>全局                 关闭                 Ctrl+F4<br>全局                 全部保存             Ctrl+Shift+S<br>全局                 全部关闭             Ctrl+Shift+F4<br>全局                 属性                 Alt+Enter<br>全局                 新建                 Ctrl+N </p><p><span style="font-weight:bold">项目</span><br>作用域                 功能                 快捷键<br>全局                 全部构建                Ctrl+B </p><p><span style="font-weight:bold">源代码</span><br>作用域                 功能                 快捷键<br>Java编辑器             格式化                 Ctrl+Shift+F<br>Java编辑器             取消注释             Ctrl+\<br>Java编辑器             注释                 Ctrl+/<br>Java编辑器             添加导入             Ctrl+Shift+M<br>Java编辑器             组织导入             Ctrl+Shift+O </p><p>Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。<br>也可以使用Ctrl+1自动修正。 </p><p><span style="font-weight:bold">运行</span><br>作用域                 功能                 快捷键<br>全局                 单步返回                 F7<br>全局                 单步跳过              F6<br>全局                 单步跳入              F5<br>全局                 单步跳入选择               Ctrl+F5<br>全局                 调试上次启动             F11<br>全局                 继续                  F8<br>全局                 使用过滤器单步执行      Shift+F5<br>全局                 添加/去除断点          Ctrl+Shift+B<br>全局                 显示                  Ctrl+D<br>全局                 运行上次启动             Ctrl+F11<br>全局                 运行至行                 Ctrl+R<br>全局                 执行                      Ctrl+U </p><p><span style="font-weight:bold">重构</span><br>作用域                 功能                 快捷键<br>全局                 撤销重构             Alt+Shift+Z<br>全局                 抽取方法             Alt+Shift+M<br>全局                 抽取局部变量             Alt+Shift+L<br>全局                 内联                 Alt+Shift+I<br>全局                 移动                 Alt+Shift+V<br>全局                 重命名                 Alt+Shift+R<br>全局                 重做                 Alt+Shift+Y</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 style=&quot;text-align:center;&quot;&gt;Eclipse快捷键大全&lt;/h1&gt;
Ctrl+1 快速修复(最经典的快捷键,就不用多说了)&lt;br&gt;
Ctrl+D: 删除当前行 &lt;br&gt;
Ctrl+Alt+↓ 复制当前行到下一行(复制增加)&lt;br&gt;
Ctrl+Alt+↑ 复制当前行到上一行(复制增加)&lt;br&gt;
Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)&lt;br&gt;
Alt+↑ 当前行和上面一行交互位置(同上)&lt;br&gt;
    
    </summary>
    
      <category term="Java开发IDE之Eclipse" scheme="https://gmsoar.github.io/categories/Java%E5%BC%80%E5%8F%91IDE%E4%B9%8BEclipse/"/>
    
    
      <category term="Eclipse" scheme="https://gmsoar.github.io/tags/Eclipse/"/>
    
  </entry>
  
</feed>
