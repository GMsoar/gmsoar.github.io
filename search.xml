<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaSE之初识Java]]></title>
    <url>%2FJavaSE%E4%B9%8B%E5%88%9D%E8%AF%86Java%2F</url>
    <content type="text"><![CDATA[No.1 初识Java Java语言概述什么是Java语言 Java语言是美国Sun公司（Stanford University Network/斯坦福大学网络公司），在1995年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。Java可运行于多个平台，如Windows, Mac OS，及其他多种UNIX版本的系统。 Java语言能做什么Java的技术体系 Sun根据应用的领域不同把Java技术划归为三个平台，依次是Java SE，Java EE ，Java ME 1.Java SE Java SE 是Java平台标准版的简称（Java Platform, Standard Edition） ，用于开发和部署桌面、服务器以及嵌入设备和实时环境中的Java应用程序。Java SE包括用于开发Java Web服务的类库，同时，Java SE为Java EE和Java ME提供了基础。我们在基础阶段学习的技术都是属于Java SE领域的内容。 2.Java EE Java EE是Java平台企业版的简称（Java Platform Enterprise Edition），用于开发便于组装、健壮、可扩展、安全的服务器端Java应用。Java EE建立于Java SE之上，具有Web服务、组件模型、以及通信API等特性，这些为面向服务的架构（SOA）以及开发Web2.0应用提供了支持。我们在就业班和企业级应用技术属于这个领域。 3.Java ME Java ME是Java微版的简称（Java Platform Micro Edition），是一个技术和规范的集合，它为移动设备（包括消费类产品、嵌入式设备、高级移动设备等）提供了基于Java环境的开发与应用平台。 桌面应用程序 桌面程序的开发几乎不流行，Java并不擅长做桌面程序，Java可以做桌面程序。 嵌入设备中的应用程序大型互联网系统开发（Java的核心用途，工作的主要内容） Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。 Java不只是做web系统，可以做服务器，做数据分析系统，做视频监控视频，轨道，智慧城市。 Java是兼容并包的语言：体系很庞大，但是功能很丰富，有一站式解决方案，安全，可以做高并发系统 。 Java语言发展历史版本升级历史 詹姆斯•高斯林（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。Java是印度尼西亚爪哇岛的英文名称，爪哇岛因盛产咖啡而闻名。Java创始人员团队中其中一名成员想起自己在Java岛（爪哇岛）上曾喝过一种美味的咖啡。 1995年Sun公司发布Java1.0版本（初始化版本） 1997年发布Java 1.1版本 1998年发布Java 1.2版本 2000年发布Java 1.3版本 2002年发布Java 1.4版本 2004年发布Java 1.5版本 2006年发布Java 1.6版本 2009年sun帝国死了。Oracle甲骨文公司收购Sun公司，并于2011发布Java 1.7版本，所以Java从此之后一直由Oracle公司管理。 2014年发布Java 1.8版本 2017年发布Java 9.0版本 2018年发布Java 10.0版本 2019 年已经是 Java 12版本 No.2 Java开发环境介绍与搭建 Java的组成JVM(Java虚拟机) JVM（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，最终都运行在JVM 之上。 JRE JRE (Java Runtime Environment) ：是Java程序的运行时环境，包含JVM 和运行时所需要的核心类库。如果程序员想要运行一个已经开发好的Java程序，那么只需要安装好JRE即可。 JDK JDK(Java Development Kit) ：是Java程序开发工具包，包含JRE 和开发人员使用的工具。我们想要运行一个已有的Java程序，那么只需安装JRE 即可。我们想要开发一个全新的Java程序，那么必须安装JDK 。 小结 1.从上面的产品介绍可以看出，JRE是包括JVM加上运行类库的，JDK包含了编译器等开发工具如后续即将介绍的javac或者java命令工具然后在加上JRE的。 2.如果程序员想要运行一个已经开发好的Java程序，那么只需要安装好JRE即可。但如果想开发一个新的Java程序应该安装JDK。 3.简言之：使用JDK安装完成Java程序，交给JRE去运行即可。 4.因为JDK已经包含了JRE,所以我们需要安装JDK即可。 Java跨平台的原理 跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特性(“一次编写,处处运行”)。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。 Java语言之所以可以跨平台的根本原因是因为JVM虚拟机。Java程序运行在Java虚拟机上，每个操作系统下都有不同版本的虚拟机。 计算机的交互方式 人机交互技术是指通过计算机输入、输出设备，以有效的方式实现人与计算机对话的技术。计算机的交互方式包含可视化界面的方式（鼠标，键盘，触摸等操作）， 语音识别，体感技术等，CLI方式（字符操作界面）等形式。 可视化界面方式 显示器上的功能操作可以直接通过鼠标，键盘，触摸等完成。 语音识别，体感技术等 应用场景如天猫精灵，汽车系统服务，等。 CLI方式（字符操作界面） 在早期的DOS操作系统中，是需要通过字符操作界面书写命令操作计算机的，Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取代，对于我们开发人员，目前还是需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。 常用DOS命令 进入DOS操作窗口 按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。 打开DOS命令行后，看到一个路径c:\user\xxx就表示我们现在操作的是c:\user\xxx这个文件夹。 常用命令 命令 操作符号 盘符切换 盘符名: 查看当前文件夹内容 dir 进入文件夹 cd 文件夹名 退出文件夹 cd.. 退出到磁盘根目录 cd\ 清屏 cls 系统时间 time 修改系统时间 date 注意:cd到其他盘的文件夹中还需要切换盘符DOS常用命令练习盘符切换:​D:/ JDK 9安装图解至此，我们已经讲解完了Java开发环境的所有准备知识，从上述内容中我们得出结论，进行Java开发，需要安装Java的产品JDK，以下是安装详解。 小贴士： 安装路径中，不要包含中文和空格。因为计算机对中文和空格目录是比较敏感的，在以后的开发中可能这种安装形式会出现一些问题。 环境变量的配置什么是环境变量 虽然我们在上述步骤中已经安装好了JDK,但是操作系统并不知道我们JDK安装到了哪里，同时开发运行Java程序，需要使用JDK中提供的工具命令，工具在JDK9安装目录的bin 目录下。配置完环境变量后我们可以在任意的目录下都可以使用JDK的开发工具。 如果需要使用这些工具命令，在DOS命令行下是不能直接使用这些工具的，就要先进入到JDK的bin目录下才可以使用，这个过程就会非常的麻烦。 如果不进入JDK的bin目录，这些工具就不能使用，会报错。 为了开发方便，我们想在任意的目录下都可以使用JDK的开发工具，则必须要配置环境变量，配置环境变量的意义在于告诉操作系统，我们使用的JDK安装到了哪里，同时告诉操作系统我们的开发工具在哪个目录下。 配置环境变量步骤 上节中已经说明了环境变量的作用，我们需要配置JAVA_HOME说明Java的安装目录，我们同时也需要配置PATH环境变量说明Java的开发工具安装到了哪里，详细步骤如下： Windows 7/8版本安装步骤 计算机鼠标右键,选择属性 选择高级系统设置 高级 选项卡，点击环境变量 点击新建 ，创建新的环境变量 变量名输入JAVA_HOME，变量值输入JDK9的安装目录 c:\Java9\jdk-9.0.1 选中Path 环境变量，双击或者点击编辑 TIP: Path中C:\ProgrammaData\Oracle\Java...，该路径是安装后默认配置的路径，可以删除。 7.在变量值的最前面，键入%JAVA_HOME%\bin; 分号必须要写，必须是英文格式。 Windows 10版本安装步骤 文件资源管理器 –&gt; 此电脑鼠标右键 –&gt; 选择属性 选择高级系统设置 –&gt; 选择 环境变量 点击下方系统变量的 新建 ，创建新的环境变量，变量名输入JAVA_HOME，变量值输入JDK9的安装目录 C:\develop\Java\jdk-9.0.1 选中Path 环境变量，双击或者点击编辑 点击新建，键入%JAVA_HOME%\bin ，必须是英文格式。选中该行，上移到最上方，点击确定。 检测配置是否成功 1.环境变量配置完成，重新开启DOS命令行，在任意目录下输入javac 命令。 2.如果输入“Javac”命令有提示，接下来还需要输入“java -version”命令，看提示的版本号与安装是否一致，一致则说明安装最终已经成功。 No.3 第一个Java程序HelloWorld 程序开发步骤说明Java程序开发三步骤：编写（写代码）、编译（翻译）、运行（跑起来）。 编写HelloWorld源程序12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125;&#125; 文件名必须是HelloWorld ，保证文件名和类的名字是一致的，注意大小写。 第一个HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的Java源文件 编译成JVM可以看懂的字节码文件 。 编译HelloWorld源文件在DOS命令行中，进入Java源文件的目录d:\day01(根据你们自己的源文件目录)，使用javac 命令进行编译。 命令： 1javac Java源文件名.后缀名 举例： 1javac HelloWorld.java 编译成功后，命令行没有任何提示。打开d:\day01目录，发现产生了一个新的文件 HelloWorld.class，该文件就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。 Java源文件的编译工具javac.exe，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。 运行HelloWorld程序在DOS命令行中，进入Java源文件的目录d:\day01，使用java 命令进行运行。 命令： 1java 类名字 举例： 1java HelloWorld java HelloWord 不要写 不要写 不要写 .class Java程序.class文件 的运行工具java.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用java命令了。 入门程序小结编译和运行是两回事 编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中，javac 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。 运行：是指将class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。 关于main方法 main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。 No.4 基本软件和基本概念 基本软件 前期阶段本人比较推荐Sublime或者notepad++进行Java代码的练习，后期阶段再使用专业的IDE集成工具IDEA、Eclipse等 注释comment注释是对代码解释和说明的文字。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，注释是给人看的，它不影响程序的编译和运行。 Java中的注释包含单行注释，多行注释和文档注释。 单行注释单行注释以 //开头 换行结束，每个单行注释只能注释一行注释信息。 多行注释多行注释以 /*开头 以*/结束，多行注释可以注释多行注释信息。 文档注释文档注释以/**开头 以*/结束,文档注释也可以注释多行信息。 三种注释的区别1.单行注释只能注释一行， 2.多行注释和文档注释都可以注释多行。 3.文档注释一般用于注释在类，方法，成员变量上（后续会遇到这些成员），文档注释的内容是可以提取到API文档中去的,下节将介绍如何生成API文档。 javadoc命令生成API文档 在d:\day01 目录下新建文本文件，完整的文件名修改为HelloWorld.java，其中文件名为HelloWorld，后缀名必须为.java 。 用记事本打开 在文件中键入文本并保存，代码如下： 123456789101112131415/** * @author Mr.Ge * @version 1.0 * 这个是一个入门的Java代码，这是我们的第一个代码HelloWord */public class HelloWorld &#123; /** * @param args * 这是程序的入口方法名称叫main * 这个方法启动的时候会自动执行 */ public static void main(String[] args) &#123; System.out.println("Hello,World!"); &#125;&#125; 打开DOS界面，进入到d:\day01目录下,输入 1javadoc -charset GBK HelloWorld.java 进入到d:/day01目录下。双击index.html，可以观察到文档注释的信息提取到了API文档中去]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>初识Java</tag>
        <tag>常用DOS</tag>
        <tag>JAVA_HOME配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse快捷键整理]]></title>
    <url>%2FEclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Eclipse快捷键大全 Ctrl+1 快速修复(最经典的快捷键,就不用多说了) Ctrl+D: 删除当前行 Ctrl+Alt+↓ 复制当前行到下一行(复制增加) Ctrl+Alt+↑ 复制当前行到上一行(复制增加) Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了) Alt+↑ 当前行和上面一行交互位置(同上) Alt+← 前一个编辑的页面 Alt+→ 下一个编辑的页面(当然是针对上面那条来说了) Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性 Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后) Shift+Ctrl+Enter 在当前行插入空行(原理同上条) Ctrl+Q 定位到最后编辑的地方 Ctrl+L 定位在某行 (对于程序超过100的人就有福音了) Ctrl+M 最大化当前的Edit或View (再按则反之) Ctrl+/ 注释当前行,再按则取消注释 Ctrl+O 快速显示 OutLine Ctrl+T 快速显示当前类的继承结构 Ctrl+W 关闭当前Editer Ctrl+K 参照选中的Word快速定位到下一个 Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示) Ctrl+/(小键盘) 折叠当前类中的所有代码 Ctrl+×(小键盘) 展开当前类中的所有代码 Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替) Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作) Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了) Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查) Ctrl+Shift+F4 关闭所有打开的Editer Ctrl+Shift+X 把当前选中的文本全部变味小写 Ctrl+Shift+Y 把当前选中的文本全部变为小写 Ctrl+Shift+F 格式化当前代码 Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之) 下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了) Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力) Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用) Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定) Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候) Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能) Alt+Shift+I 合并变量(可能这样说有点不妥Inline) Alt+Shift+V 移动函数和变量(不怎么常用) Alt+Shift+Z 重构的后悔药(Undo) 编辑作用域&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快捷键全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找并替换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+F文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找上一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Shift+K文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找下一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+K全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;撤销&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Z全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;复制&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+C全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恢复上一个选择&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+↓全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剪切&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+X全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速修正&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl1+1全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容辅助&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+/全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全部选中&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+A全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上下文信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+？Alt+Shift+?Ctrl+Shift+SpaceJava编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示工具提示描述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F2Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择封装元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+↑Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择上一个元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+←Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择下一个元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+→文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量查找&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+J文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量逆向查找&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Shift+J全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;粘贴&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+V全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重做&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Y 查看作用域 功能 快捷键全局 放大 Ctrl+=全局 缩小 Ctrl+- 窗口作用域 功能 快捷键全局 激活编辑器 F12全局 切换编辑器 Ctrl+Shift+W全局 上一个编辑器 Ctrl+Shift+F6全局 上一个视图 Ctrl+Shift+F7全局 上一个透视图 Ctrl+Shift+F8全局 下一个编辑器 Ctrl+F6全局 下一个视图 Ctrl+F7全局 下一个透视图 Ctrl+F8文本编辑器 显示标尺上下文菜单 Ctrl+W全局 显示视图菜单 Ctrl+F10全局 显示系统菜单 Alt+- 导航作用域 功能 快捷键Java编辑器 打开结构 Ctrl+F3全局 打开类型 Ctrl+Shift+T全局 打开类型层次结构 F4全局 打开声明 F3全局 打开外部javadoc Shift+F2全局 打开资源 Ctrl+Shift+R全局 后退历史记录 Alt+←全局 前进历史记录 Alt+→全局 上一个 Ctrl+,全局 下一个 Ctrl+.Java编辑器 显示大纲 Ctrl+O全局 在层次结构中打开类型 Ctrl+Shift+H全局 转至匹配的括号 Ctrl+Shift+P全局 转至上一个编辑位置 Ctrl+QJava编辑器 转至上一个成员 Ctrl+Shift+↑Java编辑器 转至下一个成员 Ctrl+Shift+↓文本编辑器 转至行 Ctrl+L 搜索作用域 功能 快捷键全局 出现在文件中 Ctrl+Shift+U全局 打开搜索对话框 Ctrl+H全局 工作区中的声明 Ctrl+G全局 工作区中的引用 Ctrl+Shift+G 文本编辑作用域 功能 快捷键文本编辑器 改写切换 Insert文本编辑器 上滚行 Ctrl+↑文本编辑器 下滚行 Ctrl+↓ 文件作用域 功能 快捷键全局 剪切 Ctrl+X全局 保存 Ctrl+S全局 打印 Ctrl+P全局 关闭 Ctrl+F4全局 全部保存 Ctrl+Shift+S全局 全部关闭 Ctrl+Shift+F4全局 属性 Alt+Enter全局 新建 Ctrl+N 项目作用域 功能 快捷键全局 全部构建 Ctrl+B 源代码作用域 功能 快捷键Java编辑器 格式化 Ctrl+Shift+FJava编辑器 取消注释 Ctrl+\Java编辑器 注释 Ctrl+/Java编辑器 添加导入 Ctrl+Shift+MJava编辑器 组织导入 Ctrl+Shift+O Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。也可以使用Ctrl+1自动修正。 运行作用域 功能 快捷键全局 单步返回 F7全局 单步跳过 F6全局 单步跳入 F5全局 单步跳入选择 Ctrl+F5全局 调试上次启动 F11全局 继续 F8全局 使用过滤器单步执行 Shift+F5全局 添加/去除断点 Ctrl+Shift+B全局 显示 Ctrl+D全局 运行上次启动 Ctrl+F11全局 运行至行 Ctrl+R全局 执行 Ctrl+U 重构作用域 功能 快捷键全局 撤销重构 Alt+Shift+Z全局 抽取方法 Alt+Shift+M全局 抽取局部变量 Alt+Shift+L全局 内联 Alt+Shift+I全局 移动 Alt+Shift+V全局 重命名 Alt+Shift+R全局 重做 Alt+Shift+Y]]></content>
      <categories>
        <category>Java开发IDE之Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
</search>
