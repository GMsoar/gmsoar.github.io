<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaSE之常量、变量、数据类型、运算符</title>
      <link href="/JavaSE%E4%B9%8B%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/JavaSE%E4%B9%8B%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="N0-1-基本概念"><a href="#N0-1-基本概念" class="headerlink" title="N0.1 基本概念"></a>N0.1 基本概念</h1><hr><h2 id="关键字的研究"><a href="#关键字的研究" class="headerlink" title="关键字的研究"></a>关键字的研究</h2><h3 id="什么是关键字？"><a href="#什么是关键字？" class="headerlink" title="什么是关键字？"></a>什么是关键字？</h3><blockquote><p>1.关键字其实就是一些英文单词，是sun公司自己占用的，具有特殊含义和特殊功能以及特殊用途的。</p><p>2.注意：关键字不能被程序员拿来定义类名，方法名或者变量名称等。</p></blockquote><h3 id="识别关键字"><a href="#识别关键字" class="headerlink" title="识别关键字"></a>识别关键字</h3><blockquote><ul><li>关键字一般会高亮</li><li>随自己接触Java知识的加深，以后自己就能辨别</li></ul></blockquote><h2 id="标识符的研究"><a href="#标识符的研究" class="headerlink" title="标识符的研究"></a>标识符的研究</h2><h3 id="什么是标识符？"><a href="#什么是标识符？" class="headerlink" title="什么是标识符？"></a>什么是标识符？</h3><blockquote><p>1.标识符是Java中为类名或者变量名称或者方法名称等命名的规范。（程序员必须遵循这个规范）</p></blockquote><h3 id="标识符的组成规范"><a href="#标识符的组成规范" class="headerlink" title="标识符的组成规范"></a>标识符的组成规范</h3><blockquote><p>1.一般是由字符（一般是英文，中文也可以但是不规范），数字，下划线，美元符$组成<br>2.强制性要求：数字不能开头。<br>3.区分大小写的。 abc Abc是不一样的。<br>4.标识符不能是关键字。</p></blockquote><h2 id="常量的概念和使用"><a href="#常量的概念和使用" class="headerlink" title="常量的概念和使用"></a>常量的概念和使用</h2><h3 id="什么是常量？"><a href="#什么是常量？" class="headerlink" title="什么是常量？"></a>什么是常量？</h3><blockquote><ul><li>是指在Java程序中固定不变的数据，常量是一旦确定了值就无法改变的。</li><li>就是实际生活中的一些确定值：3.14 , 100 , “迪丽热巴”, true , false </li></ul></blockquote><h3 id="常量有哪些？"><a href="#常量有哪些？" class="headerlink" title="常量有哪些？"></a>常量有哪些？</h3><table>    <th>常量的分类</th>    <th>示范</th>    <tr>        <td>整数常量</td>        <td>100，0，2</td>    </tr>    <tr>        <td>小数常量</td>        <td>3.14，99.8，88.8</td>    </tr>    <tr>        <td>字符常量</td>        <td>'A'，'b'，'8'，'中' (只能是单个字符必须用单引号围起来)</td>    </tr>    <tr>        <td>字符串常量</td>        <td>"我是中国人"，"12345"，"abcde" (必须用双引号围起来)</td>    </tr>    <tr>        <td>布尔常量</td>        <td>true，false (真或假)</td>    </tr>    <tr>        <td>空常量</td>        <td>null</td>    </tr></table><hr><h1 id="No-2-变量的基本概念"><a href="#No-2-变量的基本概念" class="headerlink" title="No.2 变量的基本概念"></a>No.2 变量的基本概念</h1><hr><h2 id="变量的概念和定义"><a href="#变量的概念和定义" class="headerlink" title="变量的概念和定义"></a>变量的概念和定义</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量?"></a>什么是变量?</h3><blockquote><p>变量是内存中的一块区域，其值在一定范围内可以发生改变的量。<br>可以把变量理解成一个瓶子，只能装一个特定类型的数据。</p></blockquote><h3 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用?"></a>变量的作用?</h3><blockquote><p>可以在程序执行的过程中，存储数据，操作数据，传输数据，分析数据等。都需要用变量存储这个数据。</p></blockquote><h3 id="如何定义变量？"><a href="#如何定义变量？" class="headerlink" title="如何定义变量？"></a>如何定义变量？</h3><blockquote><p>变量的定义格式 ： <strong>数据类型 变量名称 = 初始值</strong>;</p></blockquote><blockquote><p><strong>格式解析：</strong></p><ul><li>数据类型: 申明变量存储数据的具体类型，什么类型的变量就只能存放什么类型的数据。</li><li>变量名称：变量必须有名字别人才可以使用和访问，变量的名字的首字母应该小写。满足“驼峰模式”， stuAge className    </li><li>初始值：可有可无，但是必须与数据类型保持一致。什么类型的变量存储什么类型的数据。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableDemo01</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 数据类型 变量名称 = 初始值;</span></span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">22</span> ; <span class="comment">// 变量的类型int整型，age是变量的名称 22是初始值  =是赋值 </span></span><br><span class="line">System.out.println(age); <span class="comment">// 22</span></span><br><span class="line"></span><br><span class="line">age = <span class="number">100</span> ; </span><br><span class="line">System.out.println(age); <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型的概念"><a href="#数据类型的概念" class="headerlink" title="数据类型的概念"></a>数据类型的概念</h2><p><strong><code>引入变量的格式：数据类型 变量名称 = 初始值</code></strong></p><h3 id="数据类型到底有哪些"><a href="#数据类型到底有哪些" class="headerlink" title="数据类型到底有哪些"></a>数据类型到底有哪些</h3><blockquote><ul><li>Java的数据类型大体分为2大类：<strong>基本数据类型</strong>，<strong>引用数据类型</strong>。</li></ul></blockquote><ol><li>基本数据类型(4大类8大种)<table style="text-align:left"> <th>类型</th> <th>对应为</th> <th>数据范围</th> <th>占用内存</th> <tr>     <td>整数类型</td>     <td>byte<br>short<br>int(默认)<br>long</td>     <td>-128~127<br>-32768~32767<br>-2^31~2^31-1<br>-2^63~2^63-1</td>     <td>1字节<br>2字节<br>4字节<br>8字节</td> </tr> <tr>     <td>浮点型(小数)</td>     <td>float(单精度)<br>double(默认双精度)</td>     <td>1.4E-45~3.4028235E38<br>4.9E-324~1.7976931348623157E308<br></td>     <td>4字节<br>8字节<br></td> </tr> <tr>     <td>字符型</td>     <td>char</td>     <td>\u0000(即为0)<br>\uffff(即为65,535)<br></td>     <td>2字节</td> </tr> <tr>     <td>布尔型</td>     <td>boolean</td>     <td>true<br>false</td>     <td>未定</td> </tr></table></li><li>引用数据类型：数组，类，接口等，只要不是基本数据类型那么就是引用数据类型</li></ol><h3 id="数据大小单位的换算"><a href="#数据大小单位的换算" class="headerlink" title="数据大小单位的换算"></a>数据大小单位的换算</h3><blockquote><p>计算机的底层都是二进制：0 ，1 开关。<br>一个开关只能表示2种信息。男女<br>二个开关可以表示4个信息。</p></blockquote><blockquote><p>计算机认为8个开关是8位，一个开关称为1位。一位叫1b.<br>1个字节等于8位，字节的单位的B , 位的但是b.<br>1B = 8b<br>1K = 1024 = 2^10<br>/——————————————-</p><blockquote><p>1KB = 1024B = 1024<em>8个开关。<br>1MB = 1024</em>1024B<br>1GB = 1024 <em>1024</em>1024B = 1024MB<br>1TB = 1024<em>1024 *1024</em>1024B = 1024GB</p></blockquote></blockquote><blockquote><p><strong>TIP</strong>:<br>开发中我们还是会选择用int定义整型，（默认）。<br>开发中我们还是会选择用double定义小数，（默认）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*示例*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableDemo02</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 数据类型 变量名称 = 初始值;</span></span><br><span class="line"><span class="comment">// 1.字节型</span></span><br><span class="line"><span class="keyword">byte</span> age1 = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">byte</span> age2 = <span class="number">127</span>;</span><br><span class="line"><span class="comment">//byte age3 = 128; // 报错，越界了， -128-127</span></span><br><span class="line">System.out.println(age1); <span class="comment">// 23</span></span><br><span class="line">System.out.println(age2); <span class="comment">// 127</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.短整型 </span></span><br><span class="line"><span class="keyword">short</span> st = <span class="number">2333</span>;</span><br><span class="line">System.out.println(st);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.整型 </span></span><br><span class="line"><span class="keyword">int</span> money = <span class="number">10000000</span>;</span><br><span class="line">System.out.println(money);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> lg = <span class="number">232323233</span>;</span><br><span class="line">System.out.println(lg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.长整型 </span></span><br><span class="line"><span class="comment">/** 注意语法：随便写一个整数常量，默认是int类型的</span></span><br><span class="line"><span class="comment">    323232323232332323其实是int类型的，323232323232332323虽然没有超过long的范围，但是它超过了int的范围</span></span><br><span class="line"><span class="comment">所以报错，那么如果希望随便写一个整数常量默认是long类型的，需要在整数后面加上L或者l.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">long</span> nums = <span class="number">323232323232332323L</span>;</span><br><span class="line">System.out.println(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.单精度小数 </span></span><br><span class="line"><span class="comment">/** 注意语法：随便写一个小数常量，默认是double类型的</span></span><br><span class="line"><span class="comment">    5.33其实是double类型的,如果希望随便写一个小数默认是float类型就应该在小数后面加上F或者f</span></span><br><span class="line"><span class="comment">所以 */</span></span><br><span class="line"><span class="keyword">float</span> ft = <span class="number">5.33F</span>;</span><br><span class="line">System.out.println(ft);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.双精度小数</span></span><br><span class="line"><span class="keyword">double</span> db = <span class="number">3.14</span> ;</span><br><span class="line">System.out.println(db);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.布尔型</span></span><br><span class="line"><span class="keyword">boolean</span> flag1 = <span class="keyword">true</span> ;</span><br><span class="line"><span class="keyword">boolean</span> flag2 = <span class="keyword">false</span> ;</span><br><span class="line">System.out.println(flag1);</span><br><span class="line">System.out.println(flag2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.字符类型的变量 </span></span><br><span class="line"><span class="keyword">char</span> c1 = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">'中'</span>;</span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">'中国'</span>; <span class="comment">// 直接报错!</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line">System.out.println(c2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的使用注意事项"><a href="#变量的使用注意事项" class="headerlink" title="变量的使用注意事项"></a>变量的使用注意事项</h3><blockquote><p>1.变量必须定义才可以使用。变量的作用从定义开始到 <strong>}</strong> 结束<br>2.同一个范围内不能定义两个同名的变量名称。冲突！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableDemo03</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(age); // 报错!!</span></span><br><span class="line"><span class="comment">// 变量的作用从定义开始到&#125;结束</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">12</span> ;</span><br><span class="line"></span><br><span class="line">System.out.println(age);</span><br><span class="line"><span class="comment">//int age = 100 ; // 报错</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">111</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.out.println(num); // 报错</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换-自动类型转换"><a href="#数据类型转换-自动类型转换" class="headerlink" title="数据类型转换-自动类型转换"></a>数据类型转换-自动类型转换</h2><p><strong>前言</strong></p><blockquote><p>Java认为不同的变量和常量在一起运算后的结果的类型必须统一。<br>所以<strong>不同类型之间是存在类型转换的。</strong></p></blockquote><p>数据类型的转换方式：<br>（1）自动类型转换。<br>（2）强制类型转换。<br>（3）表达式的自动类型提升。</p><h4 id="自动类型转换的语法规则："><a href="#自动类型转换的语法规则：" class="headerlink" title="自动类型转换的语法规则："></a>自动类型转换的语法规则：</h4><blockquote><ul><li>数据如果在变量的类型范围之内是可以直接自动类型转换的。</li><li>小范围类型的变量可以自动类型转换给大范围类型的变量<blockquote><p>类型范围：由小到大</p><pre><code>byte -&gt; short -&gt; char -&gt; int -&gt; long  -&gt; float  -&gt; double</code></pre></blockquote></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConvert</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//  a.数据如果在变量的类型范围之内是可以直接自动类型转换的。</span></span><br><span class="line"><span class="keyword">byte</span> bt = <span class="number">120</span> ; <span class="comment">// -128 - 127 自动类型转换</span></span><br><span class="line"><span class="comment">//byte bt1 = 130 ; // 报错</span></span><br><span class="line">System.out.println(bt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  b.小范围类型的变量可以自动类型转换给大范围类型的变量</span></span><br><span class="line"><span class="keyword">byte</span> age = <span class="number">23</span> ;</span><br><span class="line"><span class="keyword">int</span> it = age ;  <span class="comment">// 自动类型转换</span></span><br><span class="line">System.out.println(age); <span class="comment">// 23</span></span><br><span class="line">System.out.println(it);  <span class="comment">// 23 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换-强制类型转换"><a href="#数据类型转换-强制类型转换" class="headerlink" title="数据类型转换-强制类型转换"></a>数据类型转换-强制类型转换</h2><h4 id="强制类型转换的语法规则："><a href="#强制类型转换的语法规则：" class="headerlink" title="强制类型转换的语法规则："></a>强制类型转换的语法规则：</h4><blockquote><ul><li>数据超过了对应变量的类型范围就必须进行手工的强制类型转换，否则代码报错！！<blockquote></blockquote></li><li>大范围类型的变量赋值给小范围类型的变量必须进行手工强制类型转换，否则代码报错！</li></ul></blockquote><h4 id="强制类型转换的格式"><a href="#强制类型转换的格式" class="headerlink" title="强制类型转换的格式:"></a>强制类型转换的格式:</h4><blockquote><p><strong>数据类型 变量 = (数据类型)数据或者变量</strong></p></blockquote><blockquote><p><strong>TIP</strong>:<br>强制类型转换可能出现数据失真（数据溢出）</p><p>小数强制转换成整数，会直接截断小数部分，保存整数结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConvert</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// a.数据超过了对应变量的类型范围就必须进行手工的强制类型转换，否则代码报错！！</span></span><br><span class="line"><span class="comment">// byte bt = 127 ; // 没有问题，进行自动类型转换。</span></span><br><span class="line"><span class="comment">// 数据类型 变量 = (数据类型)数据或者变量;</span></span><br><span class="line"><span class="keyword">byte</span> bt = (<span class="keyword">byte</span>)<span class="number">200</span> ;</span><br><span class="line">System.out.println(bt); <span class="comment">// -56 强制类型转换可能出现数据溢出，数据会失真!!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.大范围类型的变量赋值给小范围类型的变量必须进行手工强制类型转换，否则代码报错！</span></span><br><span class="line"><span class="keyword">int</span> it = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">byte</span> rs = (<span class="keyword">byte</span>)it ; <span class="comment">// 强制类型转换</span></span><br><span class="line">System.out.println(rs); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展：</span></span><br><span class="line"><span class="keyword">double</span> money = <span class="number">99999.999</span>;</span><br><span class="line"><span class="keyword">int</span> it1 = (<span class="keyword">int</span>)money;</span><br><span class="line">System.out.println(it1); <span class="comment">// 结果是一个整数，小数强制转换成整数，会直接截断小数部分，保存整数结果。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换-表达式的自动类型提升"><a href="#数据类型转换-表达式的自动类型提升" class="headerlink" title="数据类型转换-表达式的自动类型提升"></a>数据类型转换-表达式的自动类型提升</h2><h4 id="表达式的自动类型提升语法规则："><a href="#表达式的自动类型提升语法规则：" class="headerlink" title="表达式的自动类型提升语法规则："></a>表达式的自动类型提升语法规则：</h4><p>表达式：<strong>就是有+ - * / 以及变量和常量一起运算</strong></p><blockquote><p>表达式的最终结果类型是<strong>由表达式中的最高数据类型决定</strong>的，<br>最高数据类型是什么，最终结果的数据类型就是什么。</p></blockquote><blockquote><p>在表达式中，<strong>byte short , char是直接提升成int运算的</strong><br>byte ， short ，char  -&gt;  int -&gt; long  -&gt; float  -&gt; double</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConvert</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">short</span> b2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b3 = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">int</span> rs = b1 + b2 - b3 ;</span><br><span class="line">System.out.println(rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> c1 = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> c2 = <span class="number">100</span> ;</span><br><span class="line"><span class="keyword">float</span> ft = <span class="number">1.0F</span> ;</span><br><span class="line"><span class="keyword">double</span> rs1 = c1*c2 + ft + <span class="number">1.0</span>; </span><br><span class="line">System.out.println(rs1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 面试题：</span></span><br><span class="line"><span class="keyword">byte</span> a1 = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">byte</span> a2 = <span class="number">100</span> ;</span><br><span class="line"><span class="comment">// byte a3 = a1 + a2 ; // 代码会报错!在表达式中，byte short , char是直接提升成int运算的</span></span><br><span class="line"><span class="keyword">int</span> rs2 = a1 + a2 ;</span><br><span class="line">System.out.println(rs2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> bt1 =  <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">byte</span> b12 = <span class="number">2</span></span><br><span class="line"><span class="keyword">double</span> rs3 = bt1 + bt2 + <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ASCLL编码表"><a href="#ASCLL编码表" class="headerlink" title="ASCLL编码表"></a>ASCLL编码表</h2><ul><li>计算机的底层是不能存储字符的。计算机的底层都是硬件。</li><li>计算机的底层只能存储二进制。0 1</li><li>2个开关可以表示4个信息</li><li>8个开关可以表示256个信息。</li></ul><blockquote><p>二进制就是整数</p></blockquote><blockquote><p>110 = 0<em>2^0 + 1</em>2^1 + 1*2^2 = 6</p><p>00 = 0<br>01 = 1^2^0 = 1<br>10 = 0<em>2^0 + 1</em>2^1 = 2<br>11 = 1<em>2^0 + 1</em>2^1 = 3</p></blockquote><p><strong><u>字符在底层存储的就是二进制。</u></strong></p><blockquote><p>美国人：<br>为自己国家的字符做存储机制。<br>美国人用每8个开关存储一个字符就够了。对于美国人来说够用了。</p></blockquote><table><thead><tr><th>字符</th><th>对应整数</th></tr></thead><tbody><tr><td>A</td><td>65</td></tr><tr><td>B</td><td>66</td></tr><tr><td>C</td><td>67</td></tr><tr><td>a</td><td>97</td></tr><tr><td>b</td><td>98</td></tr><tr><td>c</td><td>99</td></tr><tr><td>0</td><td>48</td></tr></tbody></table><p><b>这套编码规则称为ASCII编码表。</b></p><blockquote><p><strong>TIP:</strong><br>字符在计算机底层其实就是一个编号。完全可以把字符当整数用。<br>char的范围是小于int范围的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASCIIDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rs = <span class="string">'a'</span> ; <span class="comment">// 'a'的范围小于int,自动类型转换，把a字符的编号交给了int类型的变量rs.</span></span><br><span class="line">System.out.println(rs); <span class="comment">// 97</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rs1 = <span class="string">'A'</span>;</span><br><span class="line">System.out.println(rs1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rs2 = <span class="string">'磊'</span>;</span><br><span class="line">System.out.println(rs2); <span class="comment">// 30922 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//30922如何转换成字符呢</span></span><br><span class="line"><span class="keyword">int</span> code = <span class="number">30923</span>;</span><br><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>)code;  <span class="comment">// 把编号恢复成字符！！</span></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符的研究"><a href="#运算符的研究" class="headerlink" title="运算符的研究"></a>运算符的研究</h2><h3 id="什么是运算符"><a href="#什么是运算符" class="headerlink" title="什么是运算符"></a>什么是运算符</h3><blockquote><p>是对常量和变量进行运算的符号。<br>运算符在表达式中经常使用。</p></blockquote><h3 id="Java的运算符有哪些"><a href="#Java的运算符有哪些" class="headerlink" title="Java的运算符有哪些"></a>Java的运算符有哪些</h3><blockquote><p>1.算术运算符<br>2.赋值运算符<br>3.比较运算符<br>4.三元运算符</p></blockquote><p><strong>算术运算符：+ ， - ， * ， / ， % ， ++ ，--</strong></p><blockquote><p>基本的算术运算符：+，-，*，/，% (取余)</p></blockquote><blockquote><p>自增自减运算符：++(自增), --(自减)</p><blockquote><p>++ , -- 用在变量的运算上的，可以对变量进行+1 , -1<br>++ , -- 在与变量单独运算的时候，放在变量的前后是没有区别的。都是对变量进行+1和-1操作。</p></blockquote><blockquote><p>++ ， -- 在表达式中与变量运算的时候，放在变量前后是有差别的。</p></blockquote><blockquote><p>在表达式中，++，--如果放在变量的前面，会先对变量进行+1或者-1然后再拿变量的值进行运算。</p></blockquote><blockquote><p>在表达式中，++，--如果放在变量的后面，会先拿变量的值进行运算，然后再对变量的值进行+1或者-1</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo02</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"> <span class="comment">/** 自增自减运算符: ++（自增） , --（自减）  */</span></span><br><span class="line"> <span class="keyword">int</span> a = <span class="number">10</span> ;</span><br><span class="line"> a++ ; <span class="comment">// 原理：a = a + 1</span></span><br><span class="line"> System.out.println(a); <span class="comment">//11</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> b = <span class="number">10</span> ;</span><br><span class="line"> b-- ; <span class="comment">// b = b -1 </span></span><br><span class="line"> System.out.println(b); <span class="comment">//9</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">10</span> ;</span><br><span class="line"> ++i ; <span class="comment">// i = i+ 1</span></span><br><span class="line"> System.out.println(i); <span class="comment">//11</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> j = <span class="number">10</span> ;</span><br><span class="line"> --j ; <span class="comment">// j = j -1 </span></span><br><span class="line"> System.out.println(j); <span class="comment">//9</span></span><br><span class="line"> </span><br><span class="line"> System.out.println(<span class="string">"--------------------------------拓展------------------------------------"</span>);</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   c.++ ， -- 在表达式中与变量运算的时候，放在变量前后是有差别的。</span></span><br><span class="line"><span class="comment">      在表达式中，++，--如果放在变量的前面，会先对变量进行+1或者-1然后再拿变量的值进行运算。</span></span><br><span class="line"><span class="comment">      在表达式中，++，--如果放在变量的后面，会先拿变量的值进行运算，然后再对变量的值进行+1或者-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">int</span> m = <span class="number">10</span> ;</span><br><span class="line"> <span class="keyword">int</span> rs = m++ ;  <span class="comment">// 先用再加</span></span><br><span class="line"> System.out.println(rs);  <span class="comment">// 10</span></span><br><span class="line"> System.out.println(m);   <span class="comment">// 11</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">10</span> ;</span><br><span class="line"> <span class="keyword">int</span> rss1 = ++n ;  <span class="comment">// 先加再用</span></span><br><span class="line"> System.out.println(rss1); <span class="comment">// 11</span></span><br><span class="line"> System.out.println(n); <span class="comment">//  11</span></span><br><span class="line"> </span><br><span class="line"> System.out.println(<span class="string">"--------------------------------拓展：面试题------------------------------------"</span>);</span><br><span class="line"> <span class="keyword">int</span> k = <span class="number">3</span> ;</span><br><span class="line">         <span class="keyword">int</span> p = <span class="number">4</span> ;</span><br><span class="line"> <span class="comment">// k 3  4  3  2  3</span></span><br><span class="line"> <span class="comment">// p 4  5  6</span></span><br><span class="line"> <span class="comment">// rs1     4  -  3  -  5  +  6  - 3   -  3  +1 - 3</span></span><br><span class="line">         <span class="keyword">int</span> rs1 = ++k - --k - ++p + ++p - k-- - ++k + <span class="number">1</span> -k; </span><br><span class="line"> System.out.println(rs1); <span class="comment">// -6</span></span><br><span class="line"> System.out.println( k); <span class="comment">// 3</span></span><br><span class="line"> System.out.println( p); <span class="comment">// 6</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="符号在字符和字符串中的操作"><a href="#符号在字符和字符串中的操作" class="headerlink" title="+符号在字符和字符串中的操作"></a>+符号在字符和字符串中的操作</h3><p><strong>总规则：</strong></p><blockquote><p>+符号与字符串运算的时候是用作连接符的。<br>+符号与任何字符串连接的结果依然是一个字符串。<br>整数与字符做运算的直接拿值运算。不会做连接了！</p></blockquote><blockquote><p><strong>TIP:</strong><br>能算则算，不能算就连接！！！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo03</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span> ;</span><br><span class="line"><span class="comment">// + 遇到字符串表示连接</span></span><br><span class="line">System.out.println(<span class="string">"abc"</span> + <span class="string">'a'</span>);     <span class="comment">// abca</span></span><br><span class="line">System.out.println(<span class="string">"abc"</span> + a);       <span class="comment">// abc5</span></span><br><span class="line">System.out.println(<span class="string">"abc"</span> + <span class="number">5</span> + <span class="string">'a'</span>);   <span class="comment">// abc5a</span></span><br><span class="line">System.out.println(<span class="number">15</span> + <span class="string">"abc"</span> + <span class="number">15</span>); <span class="comment">// 15abc15</span></span><br><span class="line">System.out.println(a + <span class="string">'a'</span>); <span class="comment">// 5 + 97  = 102  运算，单个字符就是整数。</span></span><br><span class="line">System.out.println(a + <span class="string">'a'</span> + <span class="string">"Dlei"</span>); <span class="comment">// 102Dlei </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><blockquote><p>基本的赋值运算符：=</p></blockquote><blockquote><p>扩展的赋值运算符：+= , -= , <em>= , /= , %=<br>注意：扩展运算符自带强制类型转换<br>a += b ;   // 公式： a = (a的数据类型) (a+b);<br>a -= b ;   // 公式： a = (a的数据类型) (a-b);<br>a *= b ;   // 公式： a = (a的数据类型) (a</em>b);<br>a /= b ;   // 公式： a = (a的数据类型) (a/b);<br>a %= b ;   // 公式： a = (a的数据类型) (a%b);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo04</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">12</span> ; <span class="comment">// =就是赋值运算符，从右往左执行！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span> ;</span><br><span class="line"><span class="comment">//int rs = a + b;</span></span><br><span class="line"><span class="comment">//a+=b ; // a = (a的类型)(a+b); </span></span><br><span class="line"><span class="comment">//a*=b ; // a = (a的类型)(a*b); </span></span><br><span class="line"><span class="comment">//a%=b ; // a = (a的类型)(a%b);    10 % 3 = 1    25 % 3 = 1  10 % 20 = 10    </span></span><br><span class="line">a /= b ; <span class="comment">// a = (a的类型)(a /b) </span></span><br><span class="line">System.out.println(a); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><blockquote><p><strong>比较运算符又叫关系运算符，是两个数据之间进行比较的运算，运算结果都是布尔值<code>true</code>或者<code>false</code> 。</strong></p></blockquote><blockquote><p><strong>符号:</strong><br>&gt;<br>&gt;=<br>&lt;<br>&lt;=<br>==<br>!=</p></blockquote><blockquote><p><strong>TIP:</strong></p><ol><li><p>判断是否相等必须是“==”。不是“=”</p></li><li><p>比较运算符的结果一定是布尔类型的结果。false ，true</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo05</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 做判断 </span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">11</span> ;</span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a == b); <span class="comment">// false 是否相等</span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true 是否不相等</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> b1 = <span class="number">10</span> ;</span><br><span class="line">System.out.println(a1 &gt; b1); <span class="comment">// false</span></span><br><span class="line">System.out.println(a1 &gt;= b1); <span class="comment">// true</span></span><br><span class="line">System.out.println(a1 &lt; b1); <span class="comment">// false</span></span><br><span class="line">System.out.println(a1 &lt;= b1); <span class="comment">// true</span></span><br><span class="line">System.out.println(a1 == b1); <span class="comment">// true 是否相等</span></span><br><span class="line">System.out.println(a1 != b1); <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="keyword">int</span> c1 = <span class="number">10</span> ;</span><br><span class="line"><span class="keyword">int</span> c2 = <span class="number">20</span> ;</span><br><span class="line">System.out.println(c1 = c2); <span class="comment">// 20 ,这里在赋值输出，不是判断是否相等！</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   运算符的练习题**</span></span><br><span class="line"><span class="comment">   随便给你一个三位数，计算出它的个位，十位，和百位并输出显示。</span></span><br><span class="line"><span class="comment">   898 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecDemo09</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">898</span> ;</span><br><span class="line"><span class="comment">// 输出个位</span></span><br><span class="line">System.out.println(<span class="string">"个位："</span>+num % <span class="number">10</span>) ; <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 输出十位</span></span><br><span class="line">System.out.println(<span class="string">"十位："</span>+ (num / <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 输出百位</span></span><br><span class="line">System.out.println(<span class="string">"百位："</span>+ num / <span class="number">100</span>); <span class="comment">// 8.98 -&gt; 8</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> 常量 </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE之初识Java</title>
      <link href="/JavaSE%E4%B9%8B%E5%88%9D%E8%AF%86Java/"/>
      <url>/JavaSE%E4%B9%8B%E5%88%9D%E8%AF%86Java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="No-1-初识Java"><a href="#No-1-初识Java" class="headerlink" title="No.1 初识Java"></a>No.1 初识Java</h1><hr><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="什么是Java语言"><a href="#什么是Java语言" class="headerlink" title="什么是Java语言"></a>什么是Java语言</h3><blockquote><p>Java语言是美国Sun公司（Stanford University Network/斯坦福大学网络公司），在1995年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。Java可运行于多个平台，如Windows, Mac OS，及其他多种UNIX版本的系统。</p></blockquote><h2 id="Java语言能做什么"><a href="#Java语言能做什么" class="headerlink" title="Java语言能做什么"></a>Java语言能做什么</h2><h3 id="Java的技术体系"><a href="#Java的技术体系" class="headerlink" title="Java的技术体系"></a>Java的技术体系</h3><blockquote><p>Sun根据应用的领域不同把Java技术划归为三个平台，依次是<strong>Java SE，Java EE ，Java ME</strong></p></blockquote><p>1.Java SE</p><blockquote><p>Java SE 是Java平台标准版的简称（Java Platform, Standard Edition） ，用于开发和部署桌面、服务器以及嵌入设备和实时环境中的Java应用程序。Java SE包括用于开发Java Web服务的类库，同时，Java SE为Java EE和Java ME提供了基础。我们在基础阶段学习的技术都是属于Java SE领域的内容。</p></blockquote><p>2.Java EE</p><blockquote><p>Java EE是Java平台企业版的简称（Java Platform  Enterprise Edition），用于开发便于组装、健壮、可扩展、安全的服务器端Java应用。Java EE建立于Java SE之上，具有Web服务、组件模型、以及通信API等特性，这些为面向服务的架构（SOA）以及开发Web2.0应用提供了支持。我们在就业班和企业级应用技术属于这个领域。</p></blockquote><p>3.Java ME</p><blockquote><p>Java ME是Java微版的简称（Java Platform Micro Edition），是一个技术和规范的集合，它为移动设备（包括消费类产品、嵌入式设备、高级移动设备等）提供了基于Java环境的开发与应用平台。</p></blockquote><h3 id="桌面应用程序"><a href="#桌面应用程序" class="headerlink" title="桌面应用程序"></a>桌面应用程序</h3><blockquote><p>桌面程序的开发几乎不流行，Java并不擅长做桌面程序，Java可以做桌面程序。</p></blockquote><h3 id="嵌入设备中的应用程序"><a href="#嵌入设备中的应用程序" class="headerlink" title="嵌入设备中的应用程序"></a>嵌入设备中的应用程序</h3><h3 id="大型互联网系统开发（Java的核心用途，工作的主要内容）"><a href="#大型互联网系统开发（Java的核心用途，工作的主要内容）" class="headerlink" title="大型互联网系统开发（Java的核心用途，工作的主要内容）"></a>大型互联网系统开发（Java的核心用途，工作的主要内容）</h3><blockquote><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><p>Java不只是做web系统，可以做服务器，做数据分析系统，做视频监控视频，轨道，智慧城市。</p><p>Java是兼容并包的语言：体系很庞大，但是功能很丰富，有一站式解决方案，安全，可以做高并发系统 。</p></blockquote><h2 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h2><h3 id="版本升级历史"><a href="#版本升级历史" class="headerlink" title="版本升级历史"></a>版本升级历史</h3><blockquote><p><strong>詹姆斯•高斯林</strong>（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。<br><strong>Java</strong>是印度尼西亚<code>爪哇岛</code>的英文名称，爪哇岛因盛产咖啡而闻名。Java创始人员团队中其中一名成员想起自己在Java岛（爪哇岛）上曾喝过一种美味的咖啡。</p><blockquote><ul><li>1995年Sun公司发布Java1.0版本（初始化版本）</li><li>1997年发布Java 1.1版本</li><li>1998年发布Java 1.2版本</li><li>2000年发布Java 1.3版本</li><li>2002年发布Java 1.4版本</li><li>2004年发布Java 1.5版本</li><li>2006年发布Java 1.6版本</li><li>2009年sun帝国死了。Oracle甲骨文公司收购Sun公司，并于2011发布Java 1.7版本，所以Java从此之后一直由Oracle公司管理。</li><li>2014年发布Java 1.8版本</li><li>2017年发布Java 9.0版本</li><li>2018年发布Java 10.0版本</li><li>2019 年已经是 Java 12版本</li></ul></blockquote></blockquote><hr><h1 id="No-2-Java开发环境介绍与搭建"><a href="#No-2-Java开发环境介绍与搭建" class="headerlink" title="No.2 Java开发环境介绍与搭建"></a>No.2 Java开发环境介绍与搭建</h1><hr><h2 id="Java的组成"><a href="#Java的组成" class="headerlink" title="Java的组成"></a>Java的组成</h2><h3 id="JVM-Java虚拟机"><a href="#JVM-Java虚拟机" class="headerlink" title="JVM(Java虚拟机)"></a>JVM(Java虚拟机)</h3><blockquote><p><strong>JVM</strong>（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，最终都运行在<code>JVM</code> 之上。</p></blockquote><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><blockquote><p><strong>JRE</strong> (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM 和运行时所需要的核心类库</code>。如果程序员想要运行一个已经开发好的Java程序，那么只需要安装好JRE即可。</p></blockquote><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><blockquote><p><strong>JDK</strong>(Java Development Kit) ：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。我们想要运行一个已有的Java程序，那么只需安装<code>JRE</code> 即可。我们想要开发一个全新的Java程序，那么必须安装<code>JDK</code> 。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>1.从上面的产品介绍可以看出，JRE是包括JVM加上运行类库的，JDK包含了编译器等开发工具如后续即将介绍的javac或者java命令工具然后在加上JRE的。</p><p>2.如果程序员想要运行一个已经开发好的Java程序，那么只需要安装好JRE即可。但如果想开发一个新的Java程序应该安装JDK。</p><p>3.简言之：<strong>使用JDK安装完成Java程序，交给JRE去运行即可</strong>。</p><p>4.因为JDK已经包含了JRE,所以我们需要安装JDK即可。</p></blockquote><h2 id="Java跨平台的原理"><a href="#Java跨平台的原理" class="headerlink" title="Java跨平台的原理"></a>Java跨平台的原理</h2><blockquote><p><strong>跨平台</strong>：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为<strong>Java语言的跨平台特性</strong>(“一次编写,处处运行”)。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</p><p><strong>Java语言之所以可以跨平台的根本原因是因为JVM虚拟机</strong>。Java程序运行在Java虚拟机上，每个操作系统下都有不同版本的虚拟机。  </p></blockquote><h2 id="计算机的交互方式"><a href="#计算机的交互方式" class="headerlink" title="计算机的交互方式"></a>计算机的交互方式</h2><blockquote><p>人机交互技术是指通过计算机输入、输出设备，以有效的方式实现人与计算机对话的技术。计算机的交互方式包含可视化界面的方式（鼠标，键盘，触摸等操作）， 语音识别，体感技术等，CLI方式（字符操作界面）等形式。</p></blockquote><h3 id="可视化界面方式"><a href="#可视化界面方式" class="headerlink" title="可视化界面方式"></a>可视化界面方式</h3><blockquote><p>显示器上的功能操作可以直接通过鼠标，键盘，触摸等完成。</p></blockquote><h3 id="语音识别，体感技术等"><a href="#语音识别，体感技术等" class="headerlink" title="语音识别，体感技术等"></a>语音识别，体感技术等</h3><blockquote><p>应用场景如天猫精灵，汽车系统服务，等。</p></blockquote><h3 id="CLI方式（字符操作界面）"><a href="#CLI方式（字符操作界面）" class="headerlink" title="CLI方式（字符操作界面）"></a>CLI方式（字符操作界面）</h3><blockquote><p>在早期的DOS操作系统中，是需要通过字符操作界面书写命令操作计算机的，Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取代，对于我们开发人员，目前还是需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p></blockquote><h3 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h3><ul><li><p><strong>进入DOS操作窗口</strong></p><blockquote><ul><li>按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</li></ul></blockquote><blockquote><ul><li>打开DOS命令行后，看到一个路径<code>c:\user\xxx</code>就表示我们现在操作的是<code>c:\user\xxx</code>这个文件夹。</li></ul></blockquote></li><li><p><strong>常用命令</strong></p><table><thead><tr><th>命令</th><th>操作符号</th></tr></thead><tbody><tr><td>盘符切换</td><td><code>盘符名:</code></td></tr><tr><td>查看当前文件夹内容</td><td><code>dir</code></td></tr><tr><td>进入文件夹</td><td><code>cd 文件夹名</code></td></tr><tr><td>退出文件夹</td><td><code>cd..</code></td></tr><tr><td>退出到磁盘根目录</td><td><code>cd\</code></td></tr><tr><td>清屏</td><td><code>cls</code></td></tr><tr><td>系统时间</td><td><code>time</code></td></tr><tr><td>修改系统时间</td><td><code>date</code></td></tr></tbody></table></li></ul><blockquote><p>注意:cd到其他盘的文件夹中还需要切换盘符<br><strong>DOS常用命令练习</strong><br>盘符切换:<br>​D:/</p></blockquote><h2 id="JDK-9安装图解"><a href="#JDK-9安装图解" class="headerlink" title="JDK 9安装图解"></a>JDK 9安装图解</h2><p>至此，我们已经讲解完了Java开发环境的所有准备知识，从上述内容中我们得出结论，进行Java开发，需要安装Java的产品JDK，以下是安装详解。</p><p><img src="/JavaSE之初识Java/jdk1.jpg" alt></p><p><img src="/JavaSE之初识Java/jdk2.jpg" alt></p><p><img src="/JavaSE之初识Java/jdk3.jpg" alt></p><p><img src="/JavaSE之初识Java/jdk4.jpg" alt></p><p><img src="/JavaSE之初识Java/jdk5.jpg" alt></p><blockquote><p><strong>TIP</strong>：</p><p>安装路径中，不要包含中文和空格。因为计算机对中文和空格目录是比较敏感的，在以后的开发中可能这种安装形式会出现一些问题。</p></blockquote><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><h3 id="什么是环境变量"><a href="#什么是环境变量" class="headerlink" title="什么是环境变量"></a>什么是环境变量</h3><blockquote><p>虽然我们在上述步骤中已经安装好了JDK,但是操作系统并不知道我们JDK安装到了哪里，同时开发运行Java程序，需要使用JDK中提供的工具命令，工具在JDK9安装目录的<code>bin</code> 目录下。<strong>配置完环境变量后我们可以在任意的目录下都可以使用JDK的开发工具。</strong></p><p>如果需要使用这些工具命令，在DOS命令行下是不能直接使用这些工具的，就要先进入到JDK的bin目录下才可以使用，这个过程就会非常的麻烦。</p><p>如果不进入JDK的<code>bin</code>目录，这些工具就不能使用，会报错。</p></blockquote><p>为了开发方便，我们想<strong>在任意的目录下都可以使用JDK的开发工具</strong>，则必须要配置环境变量，配置环境变量的意义在于告诉操作系统，我们使用的JDK安装到了哪里，同时告诉操作系统我们的开发工具在哪个目录下。</p><h3 id="配置环境变量步骤"><a href="#配置环境变量步骤" class="headerlink" title="配置环境变量步骤"></a>配置环境变量步骤</h3><blockquote><p>上节中已经说明了环境变量的作用，我们需要配置JAVA_HOME说明Java的安装目录，我们同时也需要配置PATH环境变量说明Java的开发工具安装到了哪里，详细步骤如下：</p></blockquote><h4 id="Windows-7-8版本安装步骤"><a href="#Windows-7-8版本安装步骤" class="headerlink" title="Windows 7/8版本安装步骤"></a>Windows 7/8版本安装步骤</h4><ol><li>计算机鼠标右键,选择<code>属性</code><br></li><li>选择<code>高级系统设置</code> <br></li><li><code>高级</code> 选项卡，点击<code>环境变量</code> <br></li><li>点击<code>新建</code> ，创建新的环境变量<br></li><li>变量名输入<code>JAVA_HOME</code>，变量值输入JDK9的安装目录 <code>c:\Java9\jdk-9.0.1</code> <br></li><li>选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code><blockquote><p><strong>TIP</strong>:</p><p>Path中<code>C:\ProgrammaData\Oracle\Java...</code>，该路径是安装后默认配置的路径，可以删除。</p></blockquote></li></ol><p>7.在变量值的最前面，键入<code>%JAVA_HOME%\bin;</code>  分号必须要写，必须是英文格式。</p><h4 id="Windows-10版本安装步骤"><a href="#Windows-10版本安装步骤" class="headerlink" title="Windows 10版本安装步骤"></a>Windows 10版本安装步骤</h4><ol><li>文件资源管理器 –&gt; 此电脑鼠标右键 –&gt; 选择<code>属性</code> <br></li><li>选择<code>高级系统设置</code>  –&gt; 选择  <code>环境变量</code><br></li><li>点击下方系统变量的 <code>新建</code> ，创建新的环境变量，变量名输入<code>JAVA_HOME</code>，变量值输入JDK9的安装目录 <code>C:\develop\Java\jdk-9.0.1</code> <br></li><li>选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code><br></li><li>点击<code>新建</code>，键入<code>%JAVA_HOME%\bin</code> ，必须是英文格式。选中该行，上移到最上方，点击确定。</li></ol><h3 id="检测配置是否成功"><a href="#检测配置是否成功" class="headerlink" title="检测配置是否成功"></a>检测配置是否成功</h3><blockquote><p>1.环境变量配置完成，重新开启DOS命令行，在任意目录下输入<code>javac</code> 命令。</p></blockquote><blockquote><p>2.如果输入“Javac”命令有提示，接下来还需要输入“java -version”命令，看提示的版本号与安装是否一致，一致则说明安装最终已经成功。</p></blockquote><hr><h1 id="No-3-第一个Java程序HelloWorld"><a href="#No-3-第一个Java程序HelloWorld" class="headerlink" title="No.3 第一个Java程序HelloWorld"></a>No.3 第一个Java程序HelloWorld</h1><hr><h2 id="程序开发步骤说明"><a href="#程序开发步骤说明" class="headerlink" title="程序开发步骤说明"></a>程序开发步骤说明</h2><p>Java程序开发三步骤：<strong>编写（写代码）</strong>、<strong>编译（翻译）</strong>、<strong>运行（跑起来）</strong>。</p><h2 id="编写HelloWorld源程序"><a href="#编写HelloWorld源程序" class="headerlink" title="编写HelloWorld源程序"></a>编写HelloWorld源程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文件名必须是<code>HelloWorld</code> ，保证文件名和类的名字是一致的，注意大小写。</p></blockquote><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> 。</p><h2 id="编译HelloWorld源文件"><a href="#编译HelloWorld源文件" class="headerlink" title="编译HelloWorld源文件"></a>编译HelloWorld源文件</h2><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>d:\day01(根据你们自己的源文件目录)，使用<code>javac</code> 命令进行编译。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Java源文件名.后缀名</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><p>编译成功后，命令行没有任何提示。打开<code>d:\day01</code>目录，发现产生了一个新的文件 <code>HelloWorld.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><blockquote><p>Java源文件的编译工具<code>javac.exe</code>，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。</p></blockquote><h2 id="运行HelloWorld程序"><a href="#运行HelloWorld程序" class="headerlink" title="运行HelloWorld程序"></a>运行HelloWorld程序</h2><p>在DOS命令行中，<strong>进入Java源文件的目录</strong>d:\day01，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java 类名字</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">java HelloWorld</span></span><br></pre></td></tr></table></figure><blockquote><p>java HelloWord  不要写 不要写 不要写 .class</p><p>Java程序<code>.class文件</code> 的运行工具<code>java.exe</code> ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用java命令了。</p></blockquote><h2 id="入门程序小结"><a href="#入门程序小结" class="headerlink" title="入门程序小结"></a>入门程序小结</h2><h3 id="编译和运行是两回事"><a href="#编译和运行是两回事" class="headerlink" title="编译和运行是两回事"></a>编译和运行是两回事</h3><ul><li><strong>编译</strong>：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中，<code>javac</code> 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</li><li><strong>运行</strong>：是指将<code>class文件</code> 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</li></ul><h3 id="关于main方法"><a href="#关于main方法" class="headerlink" title="关于main方法"></a>关于main方法</h3><ul><li><strong>main方法</strong>：称为主方法。写法是<strong>固定格式</strong>不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。</li></ul><hr><h1 id="No-4-基本软件和基本概念"><a href="#No-4-基本软件和基本概念" class="headerlink" title="No.4 基本软件和基本概念"></a>No.4 基本软件和基本概念</h1><hr><h2 id="基本软件"><a href="#基本软件" class="headerlink" title="基本软件"></a>基本软件</h2><ul><li>前期阶段本人比较推荐Sublime或者notepad++进行Java代码的练习，后期阶段再使用专业的IDE集成工具IDEA、Eclipse等</li></ul><h2 id="注释comment"><a href="#注释comment" class="headerlink" title="注释comment"></a>注释comment</h2><p>注释是对代码解释和说明的文字。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，注释是给人看的，它不影响程序的编译和运行。</p><p>Java中的注释包含单行注释，多行注释和文档注释。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>单行注释以 <code>//开头 换行结束</code>，每个单行注释只能注释一行注释信息。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释以 <code>/*开头  以*/结束</code>，多行注释可以注释多行注释信息。</p><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>文档注释以<code>/**开头  以*/结束</code>,文档注释也可以注释多行信息。</p><h3 id="三种注释的区别"><a href="#三种注释的区别" class="headerlink" title="三种注释的区别"></a>三种注释的区别</h3><p>1.单行注释只能注释一行，</p><p>2.多行注释和文档注释都可以注释多行。</p><p>3.文档注释一般用于注释在类，方法，成员变量上（后续会遇到这些成员），文档注释的内容是可以提取到API文档中去的,下节将介绍如何生成API文档。</p><h3 id="javadoc命令生成API文档"><a href="#javadoc命令生成API文档" class="headerlink" title="javadoc命令生成API文档"></a>javadoc命令生成API文档</h3><ol><li><p>在<code>d:\day01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code> 。</p><br></li><li><p>用记事本打开</p><br></li><li><p>在文件中键入文本并保存，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Ge</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 这个是一个入门的Java代码，这是我们的第一个代码HelloWord</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * 这是程序的入口方法名称叫main</span></span><br><span class="line"><span class="comment">     * 这个方法启动的时候会自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello,World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开DOS界面，进入到d:\day01目录下,输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc  -charset GBK HelloWorld.java</span><br></pre></td></tr></table></figure></li><li><p>进入到d:/day01目录下。双击index.html，可以观察到文档注释的信息提取到了API文档中去</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初识Java </tag>
            
            <tag> 常用DOS </tag>
            
            <tag> JAVA_HOME配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse快捷键整理</title>
      <link href="/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/"/>
      <url>/Eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 style="text-align:center;">Eclipse快捷键大全</h1>Ctrl+1 快速修复(最经典的快捷键,就不用多说了)<br>Ctrl+D: 删除当前行 <br>Ctrl+Alt+↓ 复制当前行到下一行(复制增加)<br>Ctrl+Alt+↑ 复制当前行到上一行(复制增加)<br>Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)<br>Alt+↑ 当前行和上面一行交互位置(同上)<br><a id="more"></a>Alt+← 前一个编辑的页面<br>Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)<br>Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性<br>Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)<br>Shift+Ctrl+Enter 在当前行插入空行(原理同上条)<br>Ctrl+Q 定位到最后编辑的地方<br>Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)<br>Ctrl+M 最大化当前的Edit或View (再按则反之)<br>Ctrl+/ 注释当前行,再按则取消注释<br>Ctrl+O 快速显示 OutLine<br>Ctrl+T 快速显示当前类的继承结构<br>Ctrl+W 关闭当前Editer<br>Ctrl+K 参照选中的Word快速定位到下一个<br>Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)<br>Ctrl+/(小键盘) 折叠当前类中的所有代码<br>Ctrl+×(小键盘) 展开当前类中的所有代码<br>Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)<br>Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)<br>Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes <br>line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)<br>Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)<br>Ctrl+Shift+F4 关闭所有打开的Editer<br>Ctrl+Shift+X 把当前选中的文本全部变味小写<br>Ctrl+Shift+Y 把当前选中的文本全部变为小写<br>Ctrl+Shift+F 格式化当前代码<br>Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)<br><h3>下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)</h3>Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)<br>Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)<br>Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)<br>Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)<br>Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)<br>Alt+Shift+I 合并变量(可能这样说有点不妥Inline)<br>Alt+Shift+V 移动函数和变量(不怎么常用)<br>Alt+Shift+Z 重构的后悔药(Undo)<br><p><span style="font-weight:bold">编辑</span><br>作用域&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快捷键<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找并替换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+F<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找上一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Shift+K<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找下一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+K<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;撤销&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Z<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;复制&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+C<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;恢复上一个选择&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+↓<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剪切&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+X<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速修正&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl1+1<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容辅助&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+/<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全部选中&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+A<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上下文信息&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+？<br>Alt+Shift+?<br>Ctrl+Shift+Space<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示工具提示描述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F2<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择封装元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+↑<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择上一个元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+←<br>Java编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择下一个元素&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alt+Shift+→<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量查找&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+J<br>文本编辑器&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增量逆向查找&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Shift+J<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;粘贴&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+V<br>全局&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重做&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ctrl+Y </p><p><span style="font-weight:bold">查看</span><br>作用域                 功能                 快捷键<br>全局                 放大                 Ctrl+=<br>全局                 缩小                 Ctrl+- </p><p><span style="font-weight:bold">窗口</span><br>作用域                 功能                快捷键<br>全局                 激活编辑器             F12<br>全局                 切换编辑器             Ctrl+Shift+W<br>全局                 上一个编辑器             Ctrl+Shift+F6<br>全局                 上一个视图             Ctrl+Shift+F7<br>全局                 上一个透视图             Ctrl+Shift+F8<br>全局                 下一个编辑器             Ctrl+F6<br>全局                 下一个视图             Ctrl+F7<br>全局                 下一个透视图             Ctrl+F8<br>文本编辑器             显示标尺上下文菜单     Ctrl+W<br>全局                 显示视图菜单             Ctrl+F10<br>全局                 显示系统菜单             Alt+- </p><p><span style="font-weight:bold">导航</span><br>作用域                 功能                 快捷键<br>Java编辑器             打开结构             Ctrl+F3<br>全局                 打开类型             Ctrl+Shift+T<br>全局                 打开类型层次结构         F4<br>全局                 打开声明             F3<br>全局                 打开外部javadoc         Shift+F2<br>全局                 打开资源             Ctrl+Shift+R<br>全局                 后退历史记录             Alt+←<br>全局                 前进历史记录             Alt+→<br>全局                 上一个                 Ctrl+,<br>全局                 下一个                 Ctrl+.<br>Java编辑器             显示大纲             Ctrl+O<br>全局                 在层次结构中打开类型  Ctrl+Shift+H<br>全局                 转至匹配的括号         Ctrl+Shift+P<br>全局                 转至上一个编辑位置     Ctrl+Q<br>Java编辑器             转至上一个成员         Ctrl+Shift+↑<br>Java编辑器             转至下一个成员         Ctrl+Shift+↓<br>文本编辑器             转至行                 Ctrl+L </p><p><span style="font-weight:bold">搜索</span><br>作用域                 功能                 快捷键<br>全局                 出现在文件中             Ctrl+Shift+U<br>全局                 打开搜索对话框         Ctrl+H<br>全局                 工作区中的声明         Ctrl+G<br>全局                 工作区中的引用         Ctrl+Shift+G </p><p><span style="font-weight:bold">文本编辑</span><br>作用域                 功能                 快捷键<br>文本编辑器             改写切换             Insert<br>文本编辑器             上滚行                 Ctrl+↑<br>文本编辑器             下滚行                Ctrl+↓ </p><p><span style="font-weight:bold">文件</span><br>作用域                 功能                 快捷键<br>全局                 剪切                 Ctrl+X<br>全局                    保存                    Ctrl+S<br>全局                 打印                 Ctrl+P<br>全局                 关闭                 Ctrl+F4<br>全局                 全部保存             Ctrl+Shift+S<br>全局                 全部关闭             Ctrl+Shift+F4<br>全局                 属性                 Alt+Enter<br>全局                 新建                 Ctrl+N </p><p><span style="font-weight:bold">项目</span><br>作用域                 功能                 快捷键<br>全局                 全部构建                Ctrl+B </p><p><span style="font-weight:bold">源代码</span><br>作用域                 功能                 快捷键<br>Java编辑器             格式化                 Ctrl+Shift+F<br>Java编辑器             取消注释             Ctrl+\<br>Java编辑器             注释                 Ctrl+/<br>Java编辑器             添加导入             Ctrl+Shift+M<br>Java编辑器             组织导入             Ctrl+Shift+O </p><p>Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。<br>也可以使用Ctrl+1自动修正。 </p><p><span style="font-weight:bold">运行</span><br>作用域                 功能                 快捷键<br>全局                 单步返回                 F7<br>全局                 单步跳过              F6<br>全局                 单步跳入              F5<br>全局                 单步跳入选择               Ctrl+F5<br>全局                 调试上次启动             F11<br>全局                 继续                  F8<br>全局                 使用过滤器单步执行      Shift+F5<br>全局                 添加/去除断点          Ctrl+Shift+B<br>全局                 显示                  Ctrl+D<br>全局                 运行上次启动             Ctrl+F11<br>全局                 运行至行                 Ctrl+R<br>全局                 执行                      Ctrl+U </p><p><span style="font-weight:bold">重构</span><br>作用域                 功能                 快捷键<br>全局                 撤销重构             Alt+Shift+Z<br>全局                 抽取方法             Alt+Shift+M<br>全局                 抽取局部变量             Alt+Shift+L<br>全局                 内联                 Alt+Shift+I<br>全局                 移动                 Alt+Shift+V<br>全局                 重命名                 Alt+Shift+R<br>全局                 重做                 Alt+Shift+Y</p>]]></content>
      
      
      <categories>
          
          <category> Java开发IDE之Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
